// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type Client, type TDataShape, formDataBodySerializer } from './client';
import type { PostAuthCreateAccountData, PostAuthCreateAccountResponses, PostAuthCreateAccountErrors, PostAuthCreateSessionData, PostAuthCreateSessionResponses, PostAuthCreateSessionErrors, GetAuthGetSessionData, GetAuthGetSessionResponses, GetAuthGetSessionErrors, PostAuthDeleteSessionData, PostAuthDeleteSessionResponses, PostAuthDeleteSessionErrors, GetItemsData, GetItemsResponses, GetItemsErrors, PostItemsData, PostItemsResponses, PostItemsErrors, GetItemsLocationData, GetItemsLocationResponses, GetItemsLocationErrors, DeleteItemsByIdData, DeleteItemsByIdResponses, DeleteItemsByIdErrors, GetItemsByIdData, GetItemsByIdResponses, GetItemsByIdErrors, GetUsersData, GetUsersResponses, GetUsersErrors, GetUsersByIdentifierData, GetUsersByIdentifierResponses, GetUsersByIdentifierErrors, PutUsersProfileData, PutUsersProfileResponses, PutUsersProfileErrors, DeleteUsersAccountData, DeleteUsersAccountResponses, DeleteUsersAccountErrors, GetLexiconsByIdData, GetLexiconsByIdResponses, GetLexiconsByIdErrors } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Create a new user account
 */
export const postAuthCreateAccount = <ThrowOnError extends boolean = false>(options: Options<PostAuthCreateAccountData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAuthCreateAccountResponses, PostAuthCreateAccountErrors, ThrowOnError>({
        url: '/auth/createAccount',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Log in to an existing account
 */
export const postAuthCreateSession = <ThrowOnError extends boolean = false>(options: Options<PostAuthCreateSessionData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAuthCreateSessionResponses, PostAuthCreateSessionErrors, ThrowOnError>({
        url: '/auth/createSession',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get information about the current session
 */
export const getAuthGetSession = <ThrowOnError extends boolean = false>(options?: Options<GetAuthGetSessionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAuthGetSessionResponses, GetAuthGetSessionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/getSession',
        ...options
    });
};

/**
 * Log out of the current session
 */
export const postAuthDeleteSession = <ThrowOnError extends boolean = false>(options?: Options<PostAuthDeleteSessionData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAuthDeleteSessionResponses, PostAuthDeleteSessionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/deleteSession',
        ...options
    });
};

/**
 * Get all items
 */
export const getItems = <ThrowOnError extends boolean = false>(options?: Options<GetItemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetItemsResponses, GetItemsErrors, ThrowOnError>({
        url: '/items',
        ...options
    });
};

/**
 * Create a new item
 */
export const postItems = <ThrowOnError extends boolean = false>(options: Options<PostItemsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostItemsResponses, PostItemsErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get items by location
 */
export const getItemsLocation = <ThrowOnError extends boolean = false>(options: Options<GetItemsLocationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetItemsLocationResponses, GetItemsLocationErrors, ThrowOnError>({
        url: '/items/location',
        ...options
    });
};

/**
 * Delete a specific item by ID
 */
export const deleteItemsById = <ThrowOnError extends boolean = false>(options: Options<DeleteItemsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteItemsByIdResponses, DeleteItemsByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/{id}',
        ...options
    });
};

/**
 * Get a specific item by ID
 */
export const getItemsById = <ThrowOnError extends boolean = false>(options: Options<GetItemsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetItemsByIdResponses, GetItemsByIdErrors, ThrowOnError>({
        url: '/items/{id}',
        ...options
    });
};

/**
 * Get all users
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUsersResponses, GetUsersErrors, ThrowOnError>({
        url: '/users',
        ...options
    });
};

/**
 * Get a user profile by handle or DID
 */
export const getUsersByIdentifier = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdentifierData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUsersByIdentifierResponses, GetUsersByIdentifierErrors, ThrowOnError>({
        url: '/users/{identifier}',
        ...options
    });
};

/**
 * Update the current user's profile
 */
export const putUsersProfile = <ThrowOnError extends boolean = false>(options?: Options<PutUsersProfileData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutUsersProfileResponses, PutUsersProfileErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/profile',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete the current user's account
 */
export const deleteUsersAccount = <ThrowOnError extends boolean = false>(options?: Options<DeleteUsersAccountData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteUsersAccountResponses, DeleteUsersAccountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/account',
        ...options
    });
};

/**
 * Get a lexicon by ID
 */
export const getLexiconsById = <ThrowOnError extends boolean = false>(options: Options<GetLexiconsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetLexiconsByIdResponses, GetLexiconsByIdErrors, ThrowOnError>({
        url: '/lexicons/{id}',
        ...options
    });
};
